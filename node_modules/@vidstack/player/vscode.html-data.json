{
  "version": 1.1,
  "tags": [
    {
      "name": "vds-media",
      "description": "All media elements exist inside the `<vds-media>` component. It's main jobs are to host the\nmedia controller, and expose media state through HTML attributes and CSS properties for styling\npurposes.",
      "attributes": [
        {
          "name": "fullscreen-orientation",
          "description": "This will indicate the orientation to lock the screen to when in fullscreen mode and\nthe Screen Orientation API is available. The default is `undefined` which indicates\nno screen orientation change.",
          "values": [
            {
              "name": "landscape"
            },
            {
              "name": "landscape-primary"
            },
            {
              "name": "landscape-secondary"
            },
            {
              "name": "natural"
            },
            {
              "name": "portrait"
            },
            {
              "name": "portrait-primary"
            },
            {
              "name": "portrait-secondary"
            }
          ],
          "references": []
        }
      ]
    },
    {
      "name": "vds-media-sync",
      "description": "This element is responsible for synchronizing elements of the type `MediaProviderElement`.\n\nSynchronization includes:\n\n- Single media playback (eg: user plays a video while another is already playing, so we pause\nthe newly inactive player).\n\n- Synchronized media volume (eg: user sets desired volume to 50% on one player, and they expect\nit to be consistent across all players).\n\n- Saving media volume to local storage (eg: user sets desired to volume 50%, they leave\nthe site, and when they come back they expect it to be 50% without any interaction).",
      "attributes": [
        {
          "name": "single-playback",
          "description": "Whether only one is player should be playing at a time.",
          "references": []
        },
        {
          "name": "sync-volume",
          "description": "Whether media volume should be in-sync across all media players.",
          "references": []
        },
        {
          "name": "volume-storage-key",
          "description": "If a value is provided, volume will be saved to local storage to the given key as it's\nupdated. In addition, when a media provider connects to the manager, it's volume will be\nset to the saved volume level. If no value is provided, nothing is saved or retrieved.\n\nNote that this includes both the volume and muted state.",
          "references": []
        }
      ]
    },
    {
      "name": "vds-media-visibility",
      "description": "This element is responsible for managing a `MediaProviderElement` as viewport or page\nvisibility changes occur.\n\nManagement includes:\n\n- Playback or volume changes when page visibility changes (eg: user changes tab or device\nsleeps).\n\n- Playback or volume changes when viewport visibility changes (eg: user scrolls video in and\nout of view).",
      "attributes": [
        {
          "name": "enter-viewport",
          "description": "The action to perform on the media provider when it enters the viewport.",
          "values": [
            {
              "name": "play"
            },
            {
              "name": "unmute"
            }
          ],
          "references": []
        },
        {
          "name": "exit-viewport",
          "description": "The action to perform on the media provider when it exits the viewport.",
          "values": [
            {
              "name": "pause"
            },
            {
              "name": "mute"
            }
          ],
          "references": []
        },
        {
          "name": "viewport-enter-delay",
          "description": "The amount of time in milliseconds to delay viewport enter actions.",
          "references": []
        },
        {
          "name": "enter-page",
          "description": "The action to perform on the media provider when the page becomes visible.",
          "values": [
            {
              "name": "play"
            },
            {
              "name": "unmute"
            }
          ],
          "references": []
        },
        {
          "name": "exit-page",
          "description": "The action to perform on the media provider when the page becomes hidden.",
          "values": [
            {
              "name": "pause"
            },
            {
              "name": "mute"
            }
          ],
          "references": []
        },
        {
          "name": "page-change-type",
          "description": "The type of page state to use when determining visibility.\n\n- **state:** Refers to the page lifecycle state. This is typically what you want.\n- **visibility:** Visible here means the page content may be at least partially visible. In\npractice, this means that the page is the foreground tab of a non-minimized window.\n\nðŸ’¡ Need help making a decision?\n\n- Use `state` when you want completely visible / not visible.\n- Use `visibility` when you want partially visible / not visible.",
          "values": [
            {
              "name": "state"
            },
            {
              "name": "visibility"
            }
          ],
          "references": []
        },
        {
          "name": "page-enter-delay",
          "description": "The amount of time in milliseconds to delay page enter actions.",
          "references": []
        },
        {
          "name": "intersection-root",
          "description": "A DOM query selector for the element that is used as the viewport for checking visibility\nof the media player. Must be a ancestor of the media player. Defaults to the browser viewport\nif not specified.",
          "references": []
        },
        {
          "name": "intersection-threshold",
          "description": "A number which indicates at what percentage of the media player's visibility the observer's\n`onEnter` and `onExit` actions should be triggered.",
          "references": []
        }
      ]
    },
    {
      "name": "vds-audio",
      "description": "The `<vds-audio>` element adapts the underlying `<audio>` element to satisfy the media provider\ncontract, which generally involves providing a consistent API for loading, managing, and\ntracking media state.\n\nMost the logic for this element is contained in the `Html5MediaElement` class because both the\n`<audio>` and `<video>` elements implement the native `HTMLMediaElement` interface.",
      "attributes": [
        {
          "name": "preload",
          "description": "Configures the preload setting of the underlying media element once it can load (see\n`loading` property). This will overwrite any existing `preload` value on the `<audio>`\nor `<video>` element.\n\nThe `preload` attribute provides a hint to the browser about what the author thinks will\nlead to the best user experience with regards to what content is loaded before the video is\nplayed. The recommended default is `metadata`.",
          "values": [
            {
              "name": "none"
            },
            {
              "name": "metadata"
            },
            {
              "name": "auto"
            }
          ],
          "references": []
        },
        {
          "name": "volume",
          "description": "An `int` between `0` (silent) and `1` (loudest) indicating the audio volume. Defaults to `1`.",
          "references": []
        },
        {
          "name": "paused",
          "description": "Whether playback should be paused. Defaults to `true` if no media has loaded or playback has\nnot started. Setting this to `false` will begin/resume playback.",
          "references": []
        },
        {
          "name": "current-time",
          "description": "A `double` indicating the current playback time in seconds. Defaults to `0` if the media has\nnot started to play and has not seeked. Setting this value seeks the media to the new\ntime. The value can be set to a minimum of `0` and maximum of the total length of the\nmedia indicated by the `duration`.",
          "references": []
        },
        {
          "name": "muted",
          "description": "Whether the audio is muted or not.",
          "references": []
        },
        {
          "name": "poster",
          "description": "A URL for an image to be shown while the video is downloading.",
          "references": []
        },
        {
          "name": "loop",
          "description": "Whether media should automatically start playing from the beginning (replay) every time\nit ends.",
          "references": []
        },
        {
          "name": "controls",
          "description": "Indicates whether a user interface should be shown for controlling the resource. Set this to\n`false` when you want to provide your own custom controls, and `true` if you want the current\nprovider to supply its own default controls. Depending on the provider, changing this prop\nmay cause the player to completely reset.",
          "references": []
        },
        {
          "name": "loading",
          "description": "Indicates when the provider can begin loading media.\n\n- `eager`: media will be loaded immediately.\n- `idle`: media will be loaded after the page has loaded and `requestIdleCallback` is fired.\n- `visible`: media will delay loading until the provider has entered the viewport.\n- `custom`: media will wait for the `startLoadingMedia()` method or `vds-start-loading` event.",
          "values": [
            {
              "name": "eager"
            },
            {
              "name": "idle"
            },
            {
              "name": "visible"
            },
            {
              "name": "custom"
            }
          ],
          "references": []
        },
        {
          "name": "autoplay",
          "description": "Whether playback should automatically begin as soon as enough media is available to do so\nwithout interruption.\n\nSites which automatically play audio (or videos with an audio track) can be an unpleasant\nexperience for users, so it should be avoided when possible. If you must offer autoplay\nfunctionality, you should make it opt-in (requiring a user to specifically enable it).\n\nHowever, autoplay can be useful when creating media elements whose source will be set at a\nlater time, under user control.",
          "references": []
        },
        {
          "name": "log-level",
          "description": "The current log level. Values in order of priority are: `silent`, `error`, `warn`, `info`,\nand `debug`.",
          "values": [
            {
              "name": "error"
            },
            {
              "name": "silent"
            },
            {
              "name": "warn"
            },
            {
              "name": "info"
            },
            {
              "name": "debug"
            }
          ],
          "references": []
        },
        {
          "name": "idle-delay",
          "description": "The amount of delay in milliseconds while media playback is progressing without user\nactivity to indicate an idle state.",
          "references": []
        },
        {
          "name": "fullscreen-orientation",
          "description": "This will indicate the orientation to lock the screen to when in fullscreen mode and\nthe Screen Orientation API is available. The default is `undefined` which indicates\nno screen orientation change.",
          "values": [
            {
              "name": "landscape"
            },
            {
              "name": "landscape-primary"
            },
            {
              "name": "landscape-secondary"
            },
            {
              "name": "natural"
            },
            {
              "name": "portrait"
            },
            {
              "name": "portrait-primary"
            },
            {
              "name": "portrait-secondary"
            }
          ],
          "references": []
        }
      ]
    },
    {
      "name": "vds-hls",
      "description": "The `<vds-hls>` element adapts the underlying `<video>` element to satisfy the media provider\ncontract, which generally involves providing a consistent API for loading, managing, and\ntracking media state.\n\nThis element also introduces support for HLS streaming via the popular `hls.js` library.\nHLS streaming is either [supported natively](https://caniuse.com/?search=hls) (generally\non iOS), or in environments that [support the Media Stream API](https://caniuse.com/?search=mediastream).\n\nðŸ’¡ This element re-dispatches all `hls.js` events so you can listen for them through the\nnative DOM interface (i.e., `vds-hls-media-attaching`).",
      "attributes": [
        {
          "name": "hls-config",
          "description": "The `hls.js` configuration object.",
          "references": []
        },
        {
          "name": "hls-library",
          "description": "The `hls.js` constructor (supports dynamic imports) or a URL of where it can be found.",
          "references": []
        },
        {
          "name": "preload",
          "description": "Configures the preload setting of the underlying media element once it can load (see\n`loading` property). This will overwrite any existing `preload` value on the `<audio>`\nor `<video>` element.\n\nThe `preload` attribute provides a hint to the browser about what the author thinks will\nlead to the best user experience with regards to what content is loaded before the video is\nplayed. The recommended default is `metadata`.",
          "values": [
            {
              "name": "none"
            },
            {
              "name": "metadata"
            },
            {
              "name": "auto"
            }
          ],
          "references": []
        },
        {
          "name": "volume",
          "description": "An `int` between `0` (silent) and `1` (loudest) indicating the audio volume. Defaults to `1`.",
          "references": []
        },
        {
          "name": "paused",
          "description": "Whether playback should be paused. Defaults to `true` if no media has loaded or playback has\nnot started. Setting this to `false` will begin/resume playback.",
          "references": []
        },
        {
          "name": "current-time",
          "description": "A `double` indicating the current playback time in seconds. Defaults to `0` if the media has\nnot started to play and has not seeked. Setting this value seeks the media to the new\ntime. The value can be set to a minimum of `0` and maximum of the total length of the\nmedia indicated by the `duration`.",
          "references": []
        },
        {
          "name": "muted",
          "description": "Whether the audio is muted or not.",
          "references": []
        },
        {
          "name": "poster",
          "description": "A URL for an image to be shown while the video is downloading.",
          "references": []
        },
        {
          "name": "loop",
          "description": "Whether media should automatically start playing from the beginning (replay) every time\nit ends.",
          "references": []
        },
        {
          "name": "controls",
          "description": "Indicates whether a user interface should be shown for controlling the resource. Set this to\n`false` when you want to provide your own custom controls, and `true` if you want the current\nprovider to supply its own default controls. Depending on the provider, changing this prop\nmay cause the player to completely reset.",
          "references": []
        },
        {
          "name": "loading",
          "description": "Indicates when the provider can begin loading media.\n\n- `eager`: media will be loaded immediately.\n- `idle`: media will be loaded after the page has loaded and `requestIdleCallback` is fired.\n- `visible`: media will delay loading until the provider has entered the viewport.\n- `custom`: media will wait for the `startLoadingMedia()` method or `vds-start-loading` event.",
          "values": [
            {
              "name": "eager"
            },
            {
              "name": "idle"
            },
            {
              "name": "visible"
            },
            {
              "name": "custom"
            }
          ],
          "references": []
        },
        {
          "name": "autoplay",
          "description": "Whether playback should automatically begin as soon as enough media is available to do so\nwithout interruption.\n\nSites which automatically play audio (or videos with an audio track) can be an unpleasant\nexperience for users, so it should be avoided when possible. If you must offer autoplay\nfunctionality, you should make it opt-in (requiring a user to specifically enable it).\n\nHowever, autoplay can be useful when creating media elements whose source will be set at a\nlater time, under user control.",
          "references": []
        },
        {
          "name": "log-level",
          "description": "The current log level. Values in order of priority are: `silent`, `error`, `warn`, `info`,\nand `debug`.",
          "values": [
            {
              "name": "error"
            },
            {
              "name": "silent"
            },
            {
              "name": "warn"
            },
            {
              "name": "info"
            },
            {
              "name": "debug"
            }
          ],
          "references": []
        },
        {
          "name": "idle-delay",
          "description": "The amount of delay in milliseconds while media playback is progressing without user\nactivity to indicate an idle state.",
          "references": []
        },
        {
          "name": "fullscreen-orientation",
          "description": "This will indicate the orientation to lock the screen to when in fullscreen mode and\nthe Screen Orientation API is available. The default is `undefined` which indicates\nno screen orientation change.",
          "values": [
            {
              "name": "landscape"
            },
            {
              "name": "landscape-primary"
            },
            {
              "name": "landscape-secondary"
            },
            {
              "name": "natural"
            },
            {
              "name": "portrait"
            },
            {
              "name": "portrait-primary"
            },
            {
              "name": "portrait-secondary"
            }
          ],
          "references": []
        }
      ]
    },
    {
      "name": "vds-video",
      "description": "The `<vds-video>` element adapts the underlying `<video>` element to satisfy the media provider\ncontract, which generally involves providing a consistent API for loading, managing, and\ntracking media state.\n\nMost the logic for this element is contained in the `Html5MediaElement` class because both the\n`<audio>` and `<video>` elements implement the native `HTMLMediaElement` interface.",
      "attributes": [
        {
          "name": "preload",
          "description": "Configures the preload setting of the underlying media element once it can load (see\n`loading` property). This will overwrite any existing `preload` value on the `<audio>`\nor `<video>` element.\n\nThe `preload` attribute provides a hint to the browser about what the author thinks will\nlead to the best user experience with regards to what content is loaded before the video is\nplayed. The recommended default is `metadata`.",
          "values": [
            {
              "name": "none"
            },
            {
              "name": "metadata"
            },
            {
              "name": "auto"
            }
          ],
          "references": []
        },
        {
          "name": "volume",
          "description": "An `int` between `0` (silent) and `1` (loudest) indicating the audio volume. Defaults to `1`.",
          "references": []
        },
        {
          "name": "paused",
          "description": "Whether playback should be paused. Defaults to `true` if no media has loaded or playback has\nnot started. Setting this to `false` will begin/resume playback.",
          "references": []
        },
        {
          "name": "current-time",
          "description": "A `double` indicating the current playback time in seconds. Defaults to `0` if the media has\nnot started to play and has not seeked. Setting this value seeks the media to the new\ntime. The value can be set to a minimum of `0` and maximum of the total length of the\nmedia indicated by the `duration`.",
          "references": []
        },
        {
          "name": "muted",
          "description": "Whether the audio is muted or not.",
          "references": []
        },
        {
          "name": "poster",
          "description": "A URL for an image to be shown while the video is downloading.",
          "references": []
        },
        {
          "name": "loop",
          "description": "Whether media should automatically start playing from the beginning (replay) every time\nit ends.",
          "references": []
        },
        {
          "name": "controls",
          "description": "Indicates whether a user interface should be shown for controlling the resource. Set this to\n`false` when you want to provide your own custom controls, and `true` if you want the current\nprovider to supply its own default controls. Depending on the provider, changing this prop\nmay cause the player to completely reset.",
          "references": []
        },
        {
          "name": "loading",
          "description": "Indicates when the provider can begin loading media.\n\n- `eager`: media will be loaded immediately.\n- `idle`: media will be loaded after the page has loaded and `requestIdleCallback` is fired.\n- `visible`: media will delay loading until the provider has entered the viewport.\n- `custom`: media will wait for the `startLoadingMedia()` method or `vds-start-loading` event.",
          "values": [
            {
              "name": "eager"
            },
            {
              "name": "idle"
            },
            {
              "name": "visible"
            },
            {
              "name": "custom"
            }
          ],
          "references": []
        },
        {
          "name": "autoplay",
          "description": "Whether playback should automatically begin as soon as enough media is available to do so\nwithout interruption.\n\nSites which automatically play audio (or videos with an audio track) can be an unpleasant\nexperience for users, so it should be avoided when possible. If you must offer autoplay\nfunctionality, you should make it opt-in (requiring a user to specifically enable it).\n\nHowever, autoplay can be useful when creating media elements whose source will be set at a\nlater time, under user control.",
          "references": []
        },
        {
          "name": "log-level",
          "description": "The current log level. Values in order of priority are: `silent`, `error`, `warn`, `info`,\nand `debug`.",
          "values": [
            {
              "name": "error"
            },
            {
              "name": "silent"
            },
            {
              "name": "warn"
            },
            {
              "name": "info"
            },
            {
              "name": "debug"
            }
          ],
          "references": []
        },
        {
          "name": "idle-delay",
          "description": "The amount of delay in milliseconds while media playback is progressing without user\nactivity to indicate an idle state.",
          "references": []
        },
        {
          "name": "fullscreen-orientation",
          "description": "This will indicate the orientation to lock the screen to when in fullscreen mode and\nthe Screen Orientation API is available. The default is `undefined` which indicates\nno screen orientation change.",
          "values": [
            {
              "name": "landscape"
            },
            {
              "name": "landscape-primary"
            },
            {
              "name": "landscape-secondary"
            },
            {
              "name": "natural"
            },
            {
              "name": "portrait"
            },
            {
              "name": "portrait-primary"
            },
            {
              "name": "portrait-secondary"
            }
          ],
          "references": []
        }
      ]
    },
    {
      "name": "vds-aspect-ratio",
      "description": "This element creates a container that will hold the dimensions of the desired aspect ratio. This\ncontainer is useful for reserving space for media as it loads over the network.\n\nðŸ’¡  If your browser matrix supports the\n[`aspect-ratio`](https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio) CSS property\nthen you can skip using this component, and set the desired aspect ratio directly on the\nprovider element.\n\nðŸ’¡ By default it respects the browser's default aspect-ratio for media. This is not specific\nto the loaded media but instead a general setting of `2/1`.",
      "attributes": [
        {
          "name": "min-height",
          "description": "The minimum height of the container.",
          "references": []
        },
        {
          "name": "max-height",
          "description": "The maximum height of the container.",
          "references": []
        },
        {
          "name": "ratio",
          "description": "The desired aspect ratio setting given as `'width/height'` (eg: `'16/9'`).",
          "references": []
        }
      ]
    },
    {
      "name": "vds-fullscreen-button",
      "description": "A button for toggling the fullscreen mode of the player.\n\nðŸ’¡ The following attributes are applied:\n\n- `fullscreen`: Applied when the media has entered fullscreen.\n\nðŸš¨ The `hidden` attribute will be present on this element in the event fullscreen cannot be\nrequested (no support). There are default styles for this by setting the `display` property to\n`none`. Important to be aware of this and update it according to your needs.",
      "attributes": [
        {
          "name": "target",
          "description": "The target element on which to request fullscreen on. The target can be the `media`\n(i.e., `<vds-media>`) or `provider` (e.g., `<vds-video>`) element.",
          "values": [
            {
              "name": "media"
            },
            {
              "name": "provider"
            }
          ],
          "references": []
        },
        {
          "name": "pressed",
          "description": "Whether the toggle is currently in a `pressed` state.",
          "references": []
        },
        {
          "name": "disabled",
          "description": "Whether the underlying button should be disabled (non-interactive).",
          "references": []
        }
      ]
    },
    {
      "name": "vds-gesture",
      "description": "This element enables 'actions' to be performed on the media provider based on user gestures.\n\nThe `GestureElement` can be used to build features such as:\n\n- Click the player to toggle playback.\n- Double-click the player to toggle fullscreen.\n- Tap the sides of the player to seek forwards or backwards.\n- Pause media when the user's mouse leaves the player.\n\nThis is a simple list, but it should give you an idea on when to reach for this element.",
      "attributes": [
        {
          "name": "type",
          "description": "The DOM event type that will trigger this gesture. It can be any valid DOM event type.",
          "values": [
            {
              "name": "play"
            },
            {
              "name": "pause"
            },
            {
              "name": "ended"
            },
            {
              "name": "error"
            },
            {
              "name": "playing"
            },
            {
              "name": "seeking"
            },
            {
              "name": "waiting"
            },
            {
              "name": "fullscreenchange"
            },
            {
              "name": "fullscreenerror"
            },
            {
              "name": "copy"
            },
            {
              "name": "cut"
            },
            {
              "name": "paste"
            },
            {
              "name": "abort"
            },
            {
              "name": "animationcancel"
            },
            {
              "name": "animationend"
            },
            {
              "name": "animationiteration"
            },
            {
              "name": "animationstart"
            },
            {
              "name": "auxclick"
            },
            {
              "name": "beforeinput"
            },
            {
              "name": "blur"
            },
            {
              "name": "canplay"
            },
            {
              "name": "canplaythrough"
            },
            {
              "name": "change"
            },
            {
              "name": "click"
            },
            {
              "name": "close"
            },
            {
              "name": "compositionend"
            },
            {
              "name": "compositionstart"
            },
            {
              "name": "compositionupdate"
            },
            {
              "name": "contextmenu"
            },
            {
              "name": "cuechange"
            },
            {
              "name": "dblclick"
            },
            {
              "name": "drag"
            },
            {
              "name": "dragend"
            },
            {
              "name": "dragenter"
            },
            {
              "name": "dragleave"
            },
            {
              "name": "dragover"
            },
            {
              "name": "dragstart"
            },
            {
              "name": "drop"
            },
            {
              "name": "durationchange"
            },
            {
              "name": "emptied"
            },
            {
              "name": "focus"
            },
            {
              "name": "focusin"
            },
            {
              "name": "focusout"
            },
            {
              "name": "formdata"
            },
            {
              "name": "gotpointercapture"
            },
            {
              "name": "input"
            },
            {
              "name": "invalid"
            },
            {
              "name": "keydown"
            },
            {
              "name": "keypress"
            },
            {
              "name": "keyup"
            },
            {
              "name": "load"
            },
            {
              "name": "loadeddata"
            },
            {
              "name": "loadedmetadata"
            },
            {
              "name": "loadstart"
            },
            {
              "name": "lostpointercapture"
            },
            {
              "name": "mousedown"
            },
            {
              "name": "mouseenter"
            },
            {
              "name": "mouseleave"
            },
            {
              "name": "mousemove"
            },
            {
              "name": "mouseout"
            },
            {
              "name": "mouseover"
            },
            {
              "name": "mouseup"
            },
            {
              "name": "pointercancel"
            },
            {
              "name": "pointerdown"
            },
            {
              "name": "pointerenter"
            },
            {
              "name": "pointerleave"
            },
            {
              "name": "pointermove"
            },
            {
              "name": "pointerout"
            },
            {
              "name": "pointerover"
            },
            {
              "name": "pointerup"
            },
            {
              "name": "progress"
            },
            {
              "name": "ratechange"
            },
            {
              "name": "reset"
            },
            {
              "name": "resize"
            },
            {
              "name": "scroll"
            },
            {
              "name": "securitypolicyviolation"
            },
            {
              "name": "seeked"
            },
            {
              "name": "select"
            },
            {
              "name": "selectionchange"
            },
            {
              "name": "selectstart"
            },
            {
              "name": "slotchange"
            },
            {
              "name": "stalled"
            },
            {
              "name": "submit"
            },
            {
              "name": "suspend"
            },
            {
              "name": "timeupdate"
            },
            {
              "name": "toggle"
            },
            {
              "name": "touchcancel"
            },
            {
              "name": "touchend"
            },
            {
              "name": "touchmove"
            },
            {
              "name": "touchstart"
            },
            {
              "name": "transitioncancel"
            },
            {
              "name": "transitionend"
            },
            {
              "name": "transitionrun"
            },
            {
              "name": "transitionstart"
            },
            {
              "name": "volumechange"
            },
            {
              "name": "webkitanimationend"
            },
            {
              "name": "webkitanimationiteration"
            },
            {
              "name": "webkitanimationstart"
            },
            {
              "name": "webkittransitionend"
            },
            {
              "name": "wheel"
            }
          ],
          "references": []
        },
        {
          "name": "repeat",
          "description": "The number of times a gesture event `type` should be repeated before the action is\nperformed. Keep in mind that the provided value is a multiplier, and not a constant. Thus, if\nyou want an event to occur twice before the action is performed, this will be a single\nrepetition (eg: value of `1`).",
          "references": []
        },
        {
          "name": "priority",
          "description": "The level of importance given to this gesture. If multiple gestures occur at the same time,\nthe priority will determine which gesture actions are performed. Higher priority gestures in\na single batch will cause lower level priorities to be ignored.\n\nðŸ’¡ A lower priority value means greater prioritization (eg: `0 > 1 > 2 > ... > 100`).",
          "references": []
        },
        {
          "name": "action",
          "description": "An action describes the type of media request event that will be dispatched, which will\nultimately perform some operation on the player (eg: fullscreen, mute, etc.).",
          "values": [
            {
              "name": "play"
            },
            {
              "name": "unmute"
            },
            {
              "name": "pause"
            },
            {
              "name": "mute"
            },
            {
              "name": "enter-fullscreen"
            },
            {
              "name": "exit-fullscreen"
            },
            {
              "name": "toggle:fullscreen"
            },
            {
              "name": "toggle:muted"
            },
            {
              "name": "toggle:paused"
            }
          ],
          "references": []
        },
        {
          "name": "while-idle",
          "description": "Whether the gesture action can be triggered while the user is idle.",
          "references": []
        }
      ]
    },
    {
      "name": "vds-mute-button",
      "description": "A button for toggling the muted state of the player.\n\nðŸ’¡ The following attributes are applied:\n\n- `muted`: Applied when media audio has been muted.",
      "attributes": [
        {
          "name": "pressed",
          "description": "Whether the toggle is currently in a `pressed` state.",
          "references": []
        },
        {
          "name": "disabled",
          "description": "Whether the underlying button should be disabled (non-interactive).",
          "references": []
        }
      ]
    },
    {
      "name": "vds-play-button",
      "description": "A button for toggling the playback state (play/pause) of the current media.\n\nðŸ’¡ The following attributes are applied:\n\n- `paused`: Applied when media playback has paused.",
      "attributes": [
        {
          "name": "pressed",
          "description": "Whether the toggle is currently in a `pressed` state.",
          "references": []
        },
        {
          "name": "disabled",
          "description": "Whether the underlying button should be disabled (non-interactive).",
          "references": []
        }
      ]
    },
    {
      "name": "vds-poster",
      "description": "Loads and displays the current media poster image. By default, the media provider's\nloading strategy is respected meaning the poster won't load until the media can.\n\nðŸ’¡ The following img attributes are applied:\n\n- `img-loading`: When the poster image is in the process of being downloaded by the browser.\n- `img-loaded`: When the poster image has successfully loaded.\n- `img-error`: When the poster image has failed to load.",
      "attributes": [
        {
          "name": "alt",
          "description": "â™¿ **ARIA:** Provides alternative information for a poster image if a user for some reason\ncannot view it.",
          "references": []
        }
      ]
    },
    {
      "name": "vds-slider",
      "description": "A custom built `input[type=\"range\"]` that is cross-browser friendly, ARIA friendly, mouse/touch\nfriendly and easily stylable. This component allows users to input numeric values between a\nminimum and maximum value.\n\nðŸ’¡ The following attributes are available on the host element:\n\n- `pointing`: Whether a device pointer is within the slider bounds.\n- `dragging`: Whether the slider thumb is currently being dragged.\n- `interactive`: When either `pointing` or `dragging` is true.",
      "attributes": [
        {
          "name": "min",
          "description": "The lowest slider value in the range of permitted values.",
          "references": []
        },
        {
          "name": "max",
          "description": "The greatest slider value in the range of permitted values.",
          "references": []
        },
        {
          "name": "disabled",
          "description": "Whether the slider should be disabled (non-interactive).",
          "references": []
        },
        {
          "name": "value",
          "description": "The current slider value.",
          "references": []
        },
        {
          "name": "step",
          "description": "A number that specifies the granularity that the slider value must adhere to.",
          "references": []
        },
        {
          "name": "keyboard-step",
          "description": "â™¿ **ARIA:** A number that specifies the number of steps taken when interacting with\nthe slider via keyboard.",
          "references": []
        },
        {
          "name": "shift-key-multiplier",
          "description": "â™¿ **ARIA:** A number that will be used to multiply the `keyboardStep` when the `Shift` key\nis held down and the slider value is changed by pressing `LeftArrow` or `RightArrow`. Think\nof it as `keyboardStep * shiftKeyMultiplier`.",
          "references": []
        },
        {
          "name": "custom-value-text",
          "description": "â™¿ **ARIA:** Whether custom `aria-valuemin`, `aria-valuenow`, `aria-valuemax`, and\n`aria-valuetext` values will be provided.",
          "references": []
        }
      ]
    },
    {
      "name": "vds-slider-value-text",
      "description": "Outputs the current slider value as text.",
      "attributes": [
        {
          "name": "type",
          "description": "Whether to use the slider's current value, or pointer value.",
          "values": [
            {
              "name": "current"
            },
            {
              "name": "pointer"
            }
          ],
          "references": []
        },
        {
          "name": "format",
          "description": "Determines how the value is formatted.",
          "values": [
            {
              "name": "percent"
            },
            {
              "name": "time"
            }
          ],
          "references": []
        },
        {
          "name": "show-hours",
          "description": "Whether the time should always show the hours unit, even if the time is less than\n1 hour. Only available if the `format` attribute is set to `time`.",
          "references": []
        },
        {
          "name": "pad-hours",
          "description": "Whether the hours unit should be padded with zeroes to a length of 2. Only available if\nthe `format` attribute is set to `time`.",
          "references": []
        },
        {
          "name": "decimal-places",
          "description": "Round the value when formatted as a percentage to the given number of decimal places. Only\navailable if `format` attribute is `percent`.",
          "references": []
        }
      ]
    },
    {
      "name": "vds-slider-video",
      "description": "Used to load a low-resolution video to be displayed when the user is hovering or dragging\nthe slider. The point at which they're hovering or dragging (`pointerValue`) is the preview\ntime position. The video will automatically be updated to match, so ensure it's of the same\nlength as the original.\n\nðŸ’¡ The following attributes are updated for your styling needs:\n\n- `video-can-play`: Applied when the video is ready for playback.\n- `video-error`: Applied when a media error has been encountered.\n\nðŸ’¡ The `canplay` and `error` events are re-dispatched by this element for you to listen to if\nneeded.",
      "attributes": [
        {
          "name": "src",
          "description": "The URL of a media resource to use.",
          "references": []
        }
      ]
    },
    {
      "name": "vds-time-slider",
      "description": "A slider that lets the user control the current media playback time.",
      "attributes": [
        {
          "name": "value-text",
          "description": "â™¿ **ARIA:** Human-readable text alternative for the current slider value. If you pass\nin a string containing `{currentTime}` or `{duration}` templates they'll be replaced with\nthe spoken form such as `1 hour 30 minutes`.",
          "references": []
        },
        {
          "name": "pause-while-dragging",
          "description": "Whether it should request playback to pause while the user is dragging the\nthumb. If the media was playing before the dragging starts, the state will be restored by\ndispatching a user play request once the dragging ends.",
          "references": []
        },
        {
          "name": "seeking-request-throttle",
          "description": "The amount of milliseconds to throttle media seeking request events being dispatched.",
          "references": []
        },
        {
          "name": "disabled",
          "description": "Whether the slider should be disabled (non-interactive).",
          "references": []
        },
        {
          "name": "step",
          "description": "A number that specifies the granularity that the slider value must adhere to.",
          "references": []
        },
        {
          "name": "keyboard-step",
          "description": "â™¿ **ARIA:** A number that specifies the number of steps taken when interacting with\nthe slider via keyboard.",
          "references": []
        },
        {
          "name": "shift-key-multiplier",
          "description": "â™¿ **ARIA:** A number that will be used to multiply the `keyboardStep` when the `Shift` key\nis held down and the slider value is changed by pressing `LeftArrow` or `RightArrow`. Think\nof it as `keyboardStep * shiftKeyMultiplier`.",
          "references": []
        },
        {
          "name": "custom-value-text",
          "description": "â™¿ **ARIA:** Whether custom `aria-valuemin`, `aria-valuenow`, `aria-valuemax`, and\n`aria-valuetext` values will be provided.",
          "references": []
        }
      ]
    },
    {
      "name": "vds-time",
      "description": "Outputs a media duration (eg: `currentTime`, `duration`, `bufferedAmount`, etc.) value as time\nformatted text.",
      "attributes": [
        {
          "name": "type",
          "description": "The type of media time to track.",
          "values": [
            {
              "name": "buffered"
            },
            {
              "name": "duration"
            },
            {
              "name": "seekable"
            },
            {
              "name": "current"
            }
          ],
          "references": []
        },
        {
          "name": "show-hours",
          "description": "Whether the time should always show the hours unit, even if the time is less than\n1 hour. Only available if the `format` attribute is set to `time`.",
          "references": []
        },
        {
          "name": "pad-hours",
          "description": "Whether the hours unit should be padded with zeroes to a length of 2. Only available if\nthe `format` attribute is set to `time`.",
          "references": []
        },
        {
          "name": "remainder",
          "description": "Whether to display the remaining time from the current type, until the duration is reached.",
          "references": []
        }
      ]
    },
    {
      "name": "vds-toggle-button",
      "description": "The foundation for any toggle button such as a `play-button` or `mute-button`.",
      "attributes": [
        {
          "name": "pressed",
          "description": "Whether the toggle is currently in a `pressed` state.",
          "references": []
        },
        {
          "name": "disabled",
          "description": "Whether the underlying button should be disabled (non-interactive).",
          "references": []
        }
      ]
    },
    {
      "name": "vds-volume-slider",
      "description": "A slider control that lets the user specify their desired volume level.",
      "attributes": [
        {
          "name": "disabled",
          "description": "Whether the slider should be disabled (non-interactive).",
          "references": []
        },
        {
          "name": "step",
          "description": "A number that specifies the granularity that the slider value must adhere to.",
          "references": []
        },
        {
          "name": "keyboard-step",
          "description": "â™¿ **ARIA:** A number that specifies the number of steps taken when interacting with\nthe slider via keyboard.",
          "references": []
        },
        {
          "name": "shift-key-multiplier",
          "description": "â™¿ **ARIA:** A number that will be used to multiply the `keyboardStep` when the `Shift` key\nis held down and the slider value is changed by pressing `LeftArrow` or `RightArrow`. Think\nof it as `keyboardStep * shiftKeyMultiplier`.",
          "references": []
        },
        {
          "name": "custom-value-text",
          "description": "â™¿ **ARIA:** Whether custom `aria-valuemin`, `aria-valuenow`, `aria-valuemax`, and\n`aria-valuetext` values will be provided.",
          "references": []
        }
      ]
    }
  ]
}