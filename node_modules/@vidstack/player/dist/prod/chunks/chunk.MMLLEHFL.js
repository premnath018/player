import {
  mediaProviderDiscoveryId
} from "./chunk.63VUN3OP.js";
import {
  __decorateClass
} from "./chunk.LNH2V2XS.js";

// src/media/manage/MediaVisibilityElement.ts
import {
  discover,
  DisposalBin,
  IntersectionController,
  PageController,
  vdsEvent
} from "@vidstack/foundation";
import { css, html, LitElement } from "lit";
import { property } from "lit/decorators.js";
var MediaVisibilityElement = class extends LitElement {
  constructor() {
    super();
    this.viewportEnterDelay = 0;
    this.pageChangeType = "state";
    this.pageEnterDelay = 0;
    this.intersectionThreshold = 1;
    this._isIntersecting = false;
    this._providerDisposal = new DisposalBin();
    this._hasIntersected = false;
    this.intersectionController = new IntersectionController(
      this,
      {
        root: this.intersectionRoot ? document.querySelector(this.intersectionRoot) : null,
        threshold: this.intersectionThreshold
      },
      (entries) => {
        window.clearTimeout(this._intersectionTimeout);
        const entry = entries[0];
        this._isIntersecting = entry.isIntersecting;
        if (this._hasIntersected) {
          if (entry.isIntersecting) {
            this._intersectionTimeout = window.setTimeout(() => {
              this._triggerOnEnter(this.enterViewport);
              this._intersectionTimeout = void 0;
            }, this.viewportEnterDelay);
          } else if (this.exitViewport) {
            this._isIntersecting = false;
            this._triggerOnExit(this.exitViewport);
          }
        }
        this._hasIntersected = true;
        this._dispatchVisibilityChange();
      }
    );
    this.pageController = new PageController(this, ({ state, visibility }) => {
      window.clearTimeout(this._pageTimeout);
      if (!this.isIntersecting)
        return;
      const newState = this.pageChangeType === "state" ? state : visibility;
      if (newState === "hidden") {
        this._triggerOnExit(this.exitPage);
      } else if (this.enterPage) {
        this._pageTimeout = window.setTimeout(() => {
          this._triggerOnEnter(this.enterPage);
          this._pageTimeout = void 0;
        }, this.pageEnterDelay);
      }
      this._dispatchVisibilityChange();
    });
    discover(this, mediaProviderDiscoveryId, (provider, onDisconnect) => {
      this._handleMediaProviderConnect(provider, onDisconnect);
    });
  }
  static get styles() {
    return css`:host{display:contents}`;
  }
  get isIntersecting() {
    return this._isIntersecting;
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this._hasIntersected = false;
    this._providerDisposal.empty();
  }
  render() {
    return html`<slot></slot>`;
  }
  get provider() {
    return this._provider;
  }
  _handleMediaProviderConnect(provider, onDisconnect) {
    this._provider = provider;
    const unobserve = this.intersectionController.observe(provider);
    onDisconnect(() => {
      unobserve();
      this._provider = void 0;
      this._providerDisposal.empty();
    });
  }
  _triggerOnEnter(mediaAction) {
    if (!this._provider)
      return;
    if (mediaAction === "play") {
      this._provider.paused = false;
    } else if (mediaAction === "unmute") {
      this._provider.muted = false;
    }
  }
  _triggerOnExit(mediaAction) {
    if (!this._provider)
      return;
    if (mediaAction === "pause") {
      this._provider.paused = true;
    } else if (mediaAction === "mute") {
      this._provider.muted = true;
    }
  }
  _dispatchVisibilityChange() {
    if (!this._provider)
      return;
    this.dispatchEvent(
      vdsEvent("vds-media-visibility-change", {
        bubbles: true,
        composed: true,
        detail: {
          provider: this._provider,
          viewport: {
            isIntersecting: this.isIntersecting
          },
          page: {
            state: this.pageController.state,
            visibility: this.pageController.visibility
          }
        }
      })
    );
  }
};
__decorateClass([
  property({ attribute: "enter-viewport" })
], MediaVisibilityElement.prototype, "enterViewport", 2);
__decorateClass([
  property({ attribute: "exit-viewport" })
], MediaVisibilityElement.prototype, "exitViewport", 2);
__decorateClass([
  property({ type: Number, attribute: "viewport-enter-delay" })
], MediaVisibilityElement.prototype, "viewportEnterDelay", 2);
__decorateClass([
  property({ attribute: "enter-page" })
], MediaVisibilityElement.prototype, "enterPage", 2);
__decorateClass([
  property({ attribute: "exit-page" })
], MediaVisibilityElement.prototype, "exitPage", 2);
__decorateClass([
  property({ attribute: "page-change-type" })
], MediaVisibilityElement.prototype, "pageChangeType", 2);
__decorateClass([
  property({ type: Number, attribute: "page-enter-delay" })
], MediaVisibilityElement.prototype, "pageEnterDelay", 2);
__decorateClass([
  property({ attribute: "intersection-root" })
], MediaVisibilityElement.prototype, "intersectionRoot", 2);
__decorateClass([
  property({ type: Number, attribute: "intersection-threshold" })
], MediaVisibilityElement.prototype, "intersectionThreshold", 2);

export {
  MediaVisibilityElement
};
