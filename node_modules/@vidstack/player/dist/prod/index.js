import {
  MediaSyncElement
} from "./chunks/chunk.2GNKYXSQ.js";
import {
  MediaVisibilityElement
} from "./chunks/chunk.MMLLEHFL.js";
import {
  MediaController,
  MediaElement,
  UserIdleController,
  mediaDiscoveryId
} from "./chunks/chunk.YGYRCKY2.js";
import {
  TimeSliderElement
} from "./chunks/chunk.JA2WRFAV.js";
import {
  TimeElement
} from "./chunks/chunk.K4RXYACL.js";
import {
  VolumeSliderElement
} from "./chunks/chunk.63ZIHMNQ.js";
import {
  SliderElement,
  SliderKeyDirection
} from "./chunks/chunk.33ZMGU5I.js";
import {
  MuteButtonElement
} from "./chunks/chunk.OS5G3YJW.js";
import {
  PlayButtonElement
} from "./chunks/chunk.5LQ54Q2B.js";
import {
  PosterElement
} from "./chunks/chunk.76IHT2KE.js";
import {
  SliderValueTextElement
} from "./chunks/chunk.7KY74HUU.js";
import {
  SliderVideoElement
} from "./chunks/chunk.OEJPA2BF.js";
import {
  createSliderStore,
  sliderStoreContext
} from "./chunks/chunk.CQHSYXO3.js";
import {
  AspectRatioElement
} from "./chunks/chunk.FMVUXWRU.js";
import {
  AudioElement
} from "./chunks/chunk.MWM7HRI6.js";
import {
  FullscreenButtonElement
} from "./chunks/chunk.2UJ6WD7Q.js";
import {
  ToggleButtonElement
} from "./chunks/chunk.KIF3XDBQ.js";
import {
  MediaRemoteControl
} from "./chunks/chunk.JDCQU7GF.js";
import {
  GestureElement
} from "./chunks/chunk.L3NN6FJW.js";
import {
  mediaProviderElementContext
} from "./chunks/chunk.APMKZUJJ.js";
import {
  HLS_EXTENSIONS,
  HLS_TYPES,
  HlsElement
} from "./chunks/chunk.YSRAEZEZ.js";
import {
  VideoElement,
  VideoFullscreenController,
  VideoPresentationController
} from "./chunks/chunk.4DEAUN5M.js";
import {
  AUDIO_EXTENSIONS,
  Html5MediaElement,
  VIDEO_EXTENSIONS
} from "./chunks/chunk.M7J7NUUF.js";
import {
  MediaProviderElement,
  mediaProviderDiscoveryId
} from "./chunks/chunk.63VUN3OP.js";
import {
  MEDIA_STORE_DEFAULTS,
  MediaType,
  ViewType,
  createMediaStore,
  mediaStoreContext,
  mediaStoreSubscription,
  resetMediaStore,
  softResetMediaStore
} from "./chunks/chunk.O2H47C42.js";
import "./chunks/chunk.LNH2V2XS.js";

// src/media/interact/media-event-listener.ts
import { discover, listen } from "@vidstack/foundation";
function mediaEventListener(host, eventType, listener) {
  discover(host, mediaProviderDiscoveryId, (provider, onDisconnect) => {
    const off = listen(provider, eventType, listener);
    onDisconnect(() => {
      off?.();
    });
  });
}

// src/media/MediaError.ts
var MediaErrorCode = /* @__PURE__ */ ((MediaErrorCode2) => {
  MediaErrorCode2[MediaErrorCode2["Aborted"] = 1] = "Aborted";
  MediaErrorCode2[MediaErrorCode2["Network"] = 2] = "Network";
  MediaErrorCode2[MediaErrorCode2["Decode"] = 3] = "Decode";
  MediaErrorCode2[MediaErrorCode2["SrcNotSupported"] = 4] = "SrcNotSupported";
  return MediaErrorCode2;
})(MediaErrorCode || {});

// src/index.ts
import {
  appendTriggerEvent,
  findTriggerEvent,
  hasTriggerEvent,
  isHlsjsSupported,
  walkTriggerEventChain
} from "@vidstack/foundation";
if (false) {
  console.warn("`@vidstack/player` is in dev mode. Not recommended for production!");
}
export {
  AUDIO_EXTENSIONS,
  AspectRatioElement,
  AudioElement,
  FullscreenButtonElement,
  GestureElement,
  HLS_EXTENSIONS,
  HLS_TYPES,
  HlsElement,
  Html5MediaElement,
  MEDIA_STORE_DEFAULTS,
  MediaController,
  MediaElement,
  MediaErrorCode,
  MediaProviderElement,
  MediaRemoteControl,
  MediaSyncElement,
  MediaType,
  MediaVisibilityElement,
  MuteButtonElement,
  PlayButtonElement,
  PosterElement,
  SliderElement,
  SliderKeyDirection,
  SliderValueTextElement,
  SliderVideoElement,
  TimeElement,
  TimeSliderElement,
  ToggleButtonElement,
  UserIdleController,
  VIDEO_EXTENSIONS,
  VideoElement,
  VideoFullscreenController,
  VideoPresentationController,
  ViewType,
  VolumeSliderElement,
  appendTriggerEvent,
  createMediaStore,
  createSliderStore,
  findTriggerEvent,
  hasTriggerEvent,
  isHlsjsSupported,
  mediaDiscoveryId,
  mediaEventListener,
  mediaProviderDiscoveryId,
  mediaProviderElementContext,
  mediaStoreContext,
  mediaStoreSubscription,
  resetMediaStore,
  sliderStoreContext,
  softResetMediaStore,
  walkTriggerEventChain
};
