// src/media/interact/MediaRemoteControl.ts
import {
  hostRequestQueue,
  LogDispatcher,
  RequestQueue,
  vdsEvent
} from "@vidstack/foundation";
var MediaRemoteControl = class {
  constructor(_host) {
    if (_host) {
      this._target = _host;
      this._createLogger(_host);
      this._requests = hostRequestQueue(_host);
    } else {
      this._requests = new RequestQueue();
    }
  }
  startLoading(triggerEvent) {
    this._dispatchRequest("vds-start-loading", { triggerEvent });
  }
  play(triggerEvent) {
    this._dispatchRequest("vds-play-request", { triggerEvent });
  }
  pause(triggerEvent) {
    this._dispatchRequest("vds-pause-request", { triggerEvent });
  }
  mute(triggerEvent) {
    this._dispatchRequest("vds-mute-request", { triggerEvent });
  }
  unmute(triggerEvent) {
    this._dispatchRequest("vds-unmute-request", { triggerEvent });
  }
  enterFullscreen(target, triggerEvent) {
    this._dispatchRequest("vds-enter-fullscreen-request", {
      triggerEvent,
      detail: target
    });
  }
  exitFullscreen(target, triggerEvent) {
    this._dispatchRequest("vds-exit-fullscreen-request", {
      triggerEvent,
      detail: target
    });
  }
  seeking(time, triggerEvent) {
    this._dispatchRequest("vds-seeking-request", {
      detail: time,
      triggerEvent
    });
  }
  seek(time, triggerEvent) {
    this._dispatchRequest("vds-seek-request", {
      detail: time,
      triggerEvent
    });
  }
  changeVolume(volume, triggerEvent) {
    this._dispatchRequest("vds-volume-change-request", {
      detail: volume,
      triggerEvent
    });
  }
  resumeUserIdle(triggerEvent) {
    this._dispatchRequest("vds-resume-user-idle-request", { triggerEvent });
  }
  pauseUserIdle(triggerEvent) {
    this._dispatchRequest("vds-pause-user-idle-request", { triggerEvent });
  }
  showPoster(triggerEvent) {
    this._dispatchRequest("vds-show-poster-request", { triggerEvent });
  }
  hidePoster(triggerEvent) {
    this._dispatchRequest("vds-hide-poster-request", { triggerEvent });
  }
  setTarget(target) {
    if (this._target === target)
      return;
    this._target = target;
    if (target) {
      this._createLogger(target);
      this._requests.start();
    } else {
      this._requests.stop();
    }
  }
  _dispatchRequest(type, eventInit) {
    this._requests.queue(type, () => {
      const request = vdsEvent(type, {
        ...eventInit,
        bubbles: true,
        composed: true
      });
      if (true) {
        this._logger?.infoGroup(`\u{1F4E8} dispatching \`${type}\``).labelledLog("Request Event", request).labelledLog("Trigger Event", eventInit.triggerEvent).dispatch();
      }
      this._target?.dispatchEvent(request);
    });
  }
  _createLogger(target) {
    if (true) {
      this._logger = new LogDispatcher(target);
    }
  }
};

export {
  MediaRemoteControl
};
