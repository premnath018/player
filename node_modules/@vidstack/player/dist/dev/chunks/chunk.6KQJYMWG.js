import {
  SliderElement
} from "./chunk.ANNPV6ES.js";
import {
  mediaStoreSubscription
} from "./chunk.O2H47C42.js";
import {
  __decorateClass
} from "./chunk.LNH2V2XS.js";

// src/ui/volume-slider/VolumeSliderElement.ts
import { eventListener, round, setAttributeIfEmpty } from "@vidstack/foundation";
import { property } from "lit/decorators.js";
var VolumeSliderElement = class extends SliderElement {
  constructor() {
    super();
    this.value = 100;
    this._handleSliderValueChange = eventListener(
      this,
      "vds-slider-value-change",
      this._changeVolume.bind(this)
    );
    this._handleSliderDragValueChange = eventListener(
      this,
      "vds-slider-drag-value-change",
      this._changeVolume.bind(this)
    );
    mediaStoreSubscription(this, "volume", ($volume) => {
      this.value = $volume * 100;
    });
  }
  connectedCallback() {
    super.connectedCallback();
    setAttributeIfEmpty(this, "aria-label", "Media volume");
  }
  get min() {
    return 0;
  }
  set min(_) {
  }
  get max() {
    return 100;
  }
  set max(_) {
  }
  _changeVolume(event) {
    const newVolume = event.detail;
    const mediaVolume = round(newVolume / 100, 3);
    this._mediaRemote.changeVolume(mediaVolume, event);
  }
};
__decorateClass([
  property({ attribute: false })
], VolumeSliderElement.prototype, "min", 1);
__decorateClass([
  property({ attribute: false })
], VolumeSliderElement.prototype, "max", 1);
__decorateClass([
  property({ attribute: false, state: true })
], VolumeSliderElement.prototype, "value", 2);

export {
  VolumeSliderElement
};
