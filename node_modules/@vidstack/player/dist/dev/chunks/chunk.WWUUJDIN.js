import {
  Html5MediaElement
} from "./chunk.RVJZRTLD.js";

// src/providers/video/fullscreen/VideoFullscreenController.ts
import {
  FullscreenController,
  listen,
  noop
} from "@vidstack/foundation";
var VideoFullscreenController = class extends FullscreenController {
  constructor(host, screenOrientationController, _presentationController) {
    super(host, screenOrientationController);
    this._presentationController = _presentationController;
  }
  get isFullscreen() {
    return this.isSupportedNatively ? this.isNativeFullscreen : this._presentationController.isFullscreenMode;
  }
  get isSupported() {
    return this.isSupportedNatively || this.isSupportedOnSafari;
  }
  get isSupportedOnSafari() {
    return this._presentationController.isSupported;
  }
  async _makeEnterFullscreenRequest() {
    return this.isSupportedNatively ? super._makeEnterFullscreenRequest() : this._makeFullscreenRequestOnSafari();
  }
  async _makeFullscreenRequestOnSafari() {
    return this._presentationController.setPresentationMode("fullscreen");
  }
  async _makeExitFullscreenRequest() {
    return this.isSupportedNatively ? super._makeExitFullscreenRequest() : this._makeExitFullscreenRequestOnSafari();
  }
  async _makeExitFullscreenRequestOnSafari() {
    return this._presentationController.setPresentationMode("inline");
  }
  _addFullscreenChangeEventListener(handler) {
    if (this.isSupportedNatively) {
      return super._addFullscreenChangeEventListener(handler);
    }
    if (this.isSupportedOnSafari) {
      if (true) {
        this._logger?.debug("adding `vds-video-presentation-change` listener");
      }
      return listen(
        this._host,
        "vds-video-presentation-change",
        this._handlePresentationModeChange.bind(this)
      );
    }
    return noop;
  }
  _handlePresentationModeChange(event) {
    this._handleFullscreenChange(event);
  }
  _addFullscreenErrorEventListener(handler) {
    if (!this.isSupportedNatively)
      return noop;
    return super._addFullscreenErrorEventListener(handler);
  }
};

// src/providers/video/presentation/VideoPresentationController.ts
import {
  DisposalBin,
  isFunction,
  isNil,
  listen as listen2,
  LogDispatcher,
  noop as noop2,
  redispatchEvent,
  vdsEvent
} from "@vidstack/foundation";
var VideoPresentationController = class {
  constructor(_host) {
    this._host = _host;
    this._logger = true ? new LogDispatcher(this._host) : void 0;
    this._listenerDisposal = new DisposalBin();
    const firstUpdated = _host.firstUpdated;
    _host.firstUpdated = (changedProperties) => {
      firstUpdated?.call(_host, changedProperties);
      this._listenerDisposal.add(this._addPresentationModeChangeEventListener());
    };
    _host.addController({
      hostDisconnected: this._handleHostDisconnected.bind(this)
    });
  }
  _handleHostDisconnected() {
    this.setPresentationMode("inline");
    this._listenerDisposal.empty();
  }
  get presentationMode() {
    return this._host.videoElement?.webkitPresentationMode;
  }
  get isInlineMode() {
    return this.presentationMode === "inline";
  }
  get isPictureInPictureMode() {
    return this.presentationMode === "inline";
  }
  get isFullscreenMode() {
    return this.presentationMode === "fullscreen";
  }
  get isSupported() {
    return isFunction(this._host.videoElement?.webkitSetPresentationMode);
  }
  setPresentationMode(mode) {
    this._host.videoElement?.webkitSetPresentationMode?.(mode);
  }
  _addPresentationModeChangeEventListener() {
    if (!this.isSupported || isNil(this._host.videoElement))
      return noop2;
    if (true) {
      this._logger?.debug("adding `webkitpresentationmodechanged` listener");
    }
    return listen2(
      this._host.videoElement,
      "webkitpresentationmodechanged",
      this._handlePresentationModeChange.bind(this)
    );
  }
  _handlePresentationModeChange(event) {
    if (true) {
      this._logger?.infoGroup("presentation mode change").labelledLog("Event", event).dispatch();
    }
    redispatchEvent(this._host, event);
    this._host.dispatchEvent(
      vdsEvent("vds-video-presentation-change", {
        detail: this.presentationMode,
        triggerEvent: event
      })
    );
  }
};

// src/providers/video/VideoElement.ts
import { vdsEvent as vdsEvent2 } from "@vidstack/foundation";
import { css } from "lit";
var VideoElement = class extends Html5MediaElement {
  constructor() {
    super(...arguments);
    this.presentationController = new VideoPresentationController(this);
    this.fullscreenController = new VideoFullscreenController(
      this,
      this.screenOrientationController,
      this.presentationController
    );
  }
  static get styles() {
    return [
      css`
        :host {
          display: inline-block;
          background-color: var(--vds-video-bg-color, #000);
        }

        :host([hidden]) {
          display: none;
        }

        ::slotted(video:not([width])) {
          width: var(--vds-video-width, 100%);
        }

        ::slotted(video:not([height])) {
          height: var(--vds-video-height, auto);
        }
      `
    ];
  }
  connectedCallback() {
    super.connectedCallback();
    this.dispatchEvent(
      vdsEvent2("vds-view-type-change", {
        detail: "video" /* Video */
      })
    );
  }
  get videoElement() {
    return this.mediaElement;
  }
};

export {
  VideoFullscreenController,
  VideoPresentationController,
  VideoElement
};
