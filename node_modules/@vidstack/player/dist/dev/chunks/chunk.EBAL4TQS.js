import {
  mediaProviderDiscoveryId
} from "./chunk.BJN6YOPG.js";
import {
  __decorateClass
} from "./chunk.LNH2V2XS.js";

// src/media/manage/MediaSyncElement.ts
import {
  debounce,
  discover,
  DisposalBin,
  listen,
  vdsEvent
} from "@vidstack/foundation";
import { css, html, LitElement } from "lit";
import { property } from "lit/decorators.js";
var mediaProviders = /* @__PURE__ */ new Set();
var syncingMediaPlayback = false;
var syncingMediaVolume = false;
var MediaSyncElement = class extends LitElement {
  constructor() {
    super();
    this.singlePlayback = false;
    this.syncVolume = false;
    this._providerDisposal = new DisposalBin();
    discover(this, mediaProviderDiscoveryId, (provider, onDisconnect) => {
      this._handleMediaProviderConnect(provider, onDisconnect);
    });
  }
  static get styles() {
    return css`
      :host {
        display: contents;
      }
    `;
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this._providerDisposal.empty();
  }
  render() {
    return html`<slot></slot>`;
  }
  get provider() {
    return this._provider;
  }
  _handleMediaProviderConnect(provider, onDisconnect) {
    this._provider = provider;
    mediaProviders.add(provider);
    const savedVolume = this._getSavedMediaVolume();
    if (savedVolume) {
      this._provider.volume = savedVolume.volume;
      this._provider.muted = savedVolume.muted;
    }
    if (this.singlePlayback) {
      const off = listen(provider, "vds-play", this._handleMediaPlay.bind(this));
      this._providerDisposal.add(off);
    }
    if (this.syncVolume) {
      const off = listen(
        provider,
        "vds-volume-change",
        debounce(this._handleMediaVolumeChange.bind(this), 10, true)
      );
      this._providerDisposal.add(off);
    }
    if (this.volumeStorageKey) {
      const off = listen(provider, "vds-volume-change", this._saveMediaVolume.bind(this));
      this._providerDisposal.add(off);
    }
    onDisconnect(() => {
      mediaProviders.delete(provider);
      this._provider = void 0;
      this._providerDisposal.empty();
    });
  }
  _handleMediaPlay() {
    if (syncingMediaPlayback)
      return;
    syncingMediaPlayback = true;
    mediaProviders.forEach((provider) => {
      if (provider !== this._provider) {
        provider.paused = true;
      }
    });
    syncingMediaPlayback = false;
  }
  _handleMediaVolumeChange(event) {
    if (syncingMediaVolume)
      return;
    syncingMediaVolume = true;
    const { volume, muted } = event.detail;
    mediaProviders.forEach((provider) => {
      if (provider !== this._provider) {
        provider.volume = volume;
        provider.muted = muted;
      }
    });
    this.dispatchEvent(
      vdsEvent("vds-media-volume-sync", {
        bubbles: true,
        composed: true,
        detail: event.detail
      })
    );
    syncingMediaVolume = false;
  }
  _getSavedMediaVolume() {
    if (!this.volumeStorageKey)
      return;
    try {
      return JSON.parse(localStorage.getItem(this.volumeStorageKey));
    } catch (e) {
      return void 0;
    }
  }
  _saveMediaVolume(event) {
    if (!this.volumeStorageKey)
      return;
    localStorage.setItem(this.volumeStorageKey, JSON.stringify(event.detail));
  }
};
__decorateClass([
  property({ type: Boolean, attribute: "single-playback" })
], MediaSyncElement.prototype, "singlePlayback", 2);
__decorateClass([
  property({ type: Boolean, attribute: "sync-volume" })
], MediaSyncElement.prototype, "syncVolume", 2);
__decorateClass([
  property({ attribute: "volume-storage-key" })
], MediaSyncElement.prototype, "volumeStorageKey", 2);

export {
  MediaSyncElement
};
