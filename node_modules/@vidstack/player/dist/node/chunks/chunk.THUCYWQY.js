import "@vidstack/foundation/shims/install-safe.js";

import {
  mediaStoreContext
} from "./chunk.O2H47C42.js";
import {
  __decorateClass,
  e,
  i,
  s,
  t,
  y
} from "./chunk.NUDNXB7T.js";

// src/ui/time/TimeElement.ts
import { derived, DisposalBin, formatTime } from "@vidstack/foundation";
var TimeElement = class extends s {
  constructor() {
    super(...arguments);
    this._disposal = new DisposalBin();
    this._mediaStoreConsumer = mediaStoreContext.consume(this);
    this.__seconds = 0;
    this.type = "current";
    this.showHours = false;
    this.padHours = false;
    this.remainder = false;
  }
  static get styles() {
    return [
      i`:host{display:inline-block;contain:content}:host([hidden]){display:none}`
    ];
  }
  get _mediaStore() {
    return this._mediaStoreConsumer.value;
  }
  connectedCallback() {
    super.connectedCallback();
    this._handleTypeChange();
  }
  update(changedProperties) {
    if (changedProperties.has("type") || changedProperties.has("remainder")) {
      this._handleTypeChange();
    }
    super.update(changedProperties);
  }
  disconnectedCallback() {
    this._disposal.empty();
    super.disconnectedCallback();
  }
  render() {
    return y`${this._getFormattedTime()}`;
  }
  _handleTypeChange() {
    this._disposal.empty();
    const store = this._getTypeStore();
    const unsub = (this.remainder ? this._createRemainderStore(store) : store).subscribe(
      ($seconds) => {
        this.__seconds = $seconds;
      }
    );
    this._disposal.add(unsub);
  }
  _getTypeStore() {
    switch (this.type) {
      case "buffered":
        return this._mediaStore.bufferedAmount;
      case "seekable":
        return this._mediaStore.seekableAmount;
      case "duration":
        return this._mediaStore.duration;
      default:
        return this._mediaStore.currentTime;
    }
  }
  _createRemainderStore(secondsStore) {
    return derived(
      [secondsStore, this._mediaStore.duration],
      ([$seconds, $duration]) => Math.max(0, $duration - $seconds)
    );
  }
  _getFormattedTime() {
    return formatTime(this.__seconds, this.padHours, this.showHours);
  }
};
__decorateClass([
  t()
], TimeElement.prototype, "__seconds", 2);
__decorateClass([
  e()
], TimeElement.prototype, "type", 2);
__decorateClass([
  e({ attribute: "show-hours", type: Boolean })
], TimeElement.prototype, "showHours", 2);
__decorateClass([
  e({ attribute: "pad-hours", type: Boolean })
], TimeElement.prototype, "padHours", 2);
__decorateClass([
  e({ type: Boolean })
], TimeElement.prototype, "remainder", 2);

export {
  TimeElement
};
