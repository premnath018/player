import "@vidstack/foundation/shims/install-safe.js";

import {
  sliderStoreContext
} from "./chunk.CQHSYXO3.js";
import {
  __decorateClass,
  e,
  i,
  s,
  t,
  y
} from "./chunk.NUDNXB7T.js";

// src/ui/slider/SliderValueTextElement.ts
import { derived, DisposalBin, formatTime, round } from "@vidstack/foundation";
var SliderValueTextElement = class extends s {
  constructor() {
    super(...arguments);
    this._disposal = new DisposalBin();
    this._sliderStoreConsumer = sliderStoreContext.consume(this);
    this.__value = 0;
    this.type = "current";
    this.showHours = false;
    this.padHours = false;
    this.decimalPlaces = 2;
  }
  static get styles() {
    return [
      i`:host{display:inline-block;contain:content}:host([hidden]){display:none}`
    ];
  }
  get _sliderStore() {
    return this._sliderStoreConsumer.value;
  }
  connectedCallback() {
    super.connectedCallback();
    this._handleTypeChange();
  }
  update(changedProperties) {
    if (changedProperties.has("type") || changedProperties.has("format")) {
      this._handleTypeChange();
    }
    super.update(changedProperties);
  }
  disconnectedCallback() {
    this._disposal.empty();
    super.disconnectedCallback();
  }
  render() {
    return y`${this._getValueText()}`;
  }
  _handleTypeChange() {
    this._disposal.empty();
    const valueStore = this._sliderStore[this.type === "current" ? "value" : "pointerValue"];
    const store = this.format === "percent" ? this._createPercentStore(valueStore) : valueStore;
    const unsub = store.subscribe(($value) => {
      this.__value = $value;
    });
    this._disposal.add(unsub);
  }
  _createPercentStore(valueStore) {
    return derived(
      [valueStore, this._sliderStore.min, this._sliderStore.max],
      ([$value, $min, $max]) => {
        const range = $max - $min;
        return $value / range * 100;
      }
    );
  }
  _getValueText() {
    switch (this.format) {
      case "percent":
        return this._getPercentFormat();
      case "time":
        return this._getTimeFormat();
      default:
        return `${this.__value}`;
    }
  }
  _getPercentFormat() {
    return `${round(this.__value, this.decimalPlaces)}%`;
  }
  _getTimeFormat() {
    return formatTime(this.__value, this.padHours, this.showHours);
  }
};
__decorateClass([
  t()
], SliderValueTextElement.prototype, "__value", 2);
__decorateClass([
  e()
], SliderValueTextElement.prototype, "type", 2);
__decorateClass([
  e()
], SliderValueTextElement.prototype, "format", 2);
__decorateClass([
  e({ attribute: "show-hours", type: Boolean })
], SliderValueTextElement.prototype, "showHours", 2);
__decorateClass([
  e({ attribute: "pad-hours", type: Boolean })
], SliderValueTextElement.prototype, "padHours", 2);
__decorateClass([
  e({ attribute: "decimal-places", type: Number })
], SliderValueTextElement.prototype, "decimalPlaces", 2);

export {
  SliderValueTextElement
};
