import "@vidstack/foundation/shims/install-safe.js";

import {
  __decorateClass,
  e,
  i,
  s,
  y
} from "./chunk.NUDNXB7T.js";

// src/ui/toggle-button/ToggleButtonElement.ts
import {
  eventListener,
  focusVisiblePolyfill,
  isKeyboardClick,
  isKeyboardEvent,
  setAttribute,
  setAttributeIfEmpty
} from "@vidstack/foundation";

// src/ui/toggle-button/styles.ts
var toggleButtonElementStyles = i`:host{display:table;contain:content;user-select:none;cursor:pointer;-webkit-user-select:none;-webkit-tap-highlight-color:transparent}:host([hidden]){display:none}:host(:focus){outline:0}:host(:focus-visible){outline:1px auto Highlight;outline:1px auto -webkit-focus-ring-color}:host(.focus-visible){outline:1px auto Highlight;outline:1px auto -webkit-focus-ring-color}`;

// src/ui/toggle-button/ToggleButtonElement.ts
var ToggleButtonElement = class extends s {
  constructor() {
    super();
    this.pressed = false;
    this.disabled = false;
    this._handleButtonClickCapture = eventListener(
      this,
      "click",
      (event) => {
        if (this.disabled) {
          event.preventDefault();
          event.stopImmediatePropagation();
        }
      },
      { capture: true }
    );
    if (false)
      logElementLifecycle(this);
    focusVisiblePolyfill(this);
    ["pointerup", "keydown"].forEach((eventType) => {
      eventListener(this, eventType, (event) => {
        if (this.disabled || isKeyboardEvent(event) && !isKeyboardClick(event)) {
          return;
        }
        this._handleButtonClick(event);
      });
    });
  }
  static get styles() {
    return [toggleButtonElementStyles];
  }
  static get parts() {
    return [];
  }
  connectedCallback() {
    super.connectedCallback();
    setAttributeIfEmpty(this, "tabindex", "0");
    setAttributeIfEmpty(this, "role", "button");
    this._updateAriaPressedAttr();
  }
  updated(changedProperties) {
    if (changedProperties.has("pressed")) {
      this._updateAriaPressedAttr();
    }
  }
  _updateAriaPressedAttr() {
    setAttribute(this, "aria-pressed", this.pressed ? "true" : "false");
  }
  render() {
    return this._renderDefaultSlot();
  }
  _renderDefaultSlot() {
    return y`<slot></slot>`;
  }
  _handleButtonClick(event) {
    this.pressed = !this.pressed;
  }
};
__decorateClass([
  e({ type: Boolean })
], ToggleButtonElement.prototype, "pressed", 2);
__decorateClass([
  e({ type: Boolean, reflect: true })
], ToggleButtonElement.prototype, "disabled", 2);

export {
  ToggleButtonElement
};
