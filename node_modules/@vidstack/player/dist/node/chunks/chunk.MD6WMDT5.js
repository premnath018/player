import "@vidstack/foundation/shims/install-safe.js";

import {
  e as e2,
  i as i2,
  t
} from "./chunk.LICA45E5.js";
import {
  T,
  __decorateClass,
  e,
  i,
  s,
  y
} from "./chunk.NUDNXB7T.js";

// src/ui/aspect-ratio/AspectRatioElement.ts
import { isString } from "@vidstack/foundation";

// ../../node_modules/.pnpm/lit-html@2.3.1/node_modules/lit-html/node/directives/style-map.js
var i3 = e2(class extends i2 {
  constructor(t2) {
    var e3;
    if (super(t2), t2.type !== t.ATTRIBUTE || "style" !== t2.name || (null === (e3 = t2.strings) || void 0 === e3 ? void 0 : e3.length) > 2)
      throw Error("The `styleMap` directive must be used in the `style` attribute and must be the only part in the attribute.");
  }
  render(t2) {
    return Object.keys(t2).reduce((e3, r) => {
      const s2 = t2[r];
      return null == s2 ? e3 : e3 + `${r = r.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g, "-$&").toLowerCase()}:${s2};`;
    }, "");
  }
  update(e3, [r]) {
    const { style: s2 } = e3.element;
    if (void 0 === this.vt) {
      this.vt = /* @__PURE__ */ new Set();
      for (const t2 in r)
        this.vt.add(t2);
      return this.render(r);
    }
    this.vt.forEach((t2) => {
      null == r[t2] && (this.vt.delete(t2), t2.includes("-") ? s2.removeProperty(t2) : s2[t2] = "");
    });
    for (const t2 in r) {
      const e4 = r[t2];
      null != e4 && (this.vt.add(t2), t2.includes("-") ? s2.setProperty(t2, e4) : s2[t2] = e4);
    }
    return T;
  }
});

// src/ui/aspect-ratio/styles.ts
var aspectRatioElementStyles = i`:host{display:block}:host([hidden]){display:none}.container{position:relative;width:100%;height:0;padding-bottom:min(max(var(--vds-aspect-ratio-min-height),var(--vds-aspect-ratio-percent)),var(--vds-aspect-ratio-max-height))}slot{display:block;position:absolute;top:0;left:0;width:100%;height:100%}::slotted(*){--vds-video-width:100%;--vds-video-height:100%;width:100%;height:100%}`;

// src/ui/aspect-ratio/AspectRatioElement.ts
var AspectRatioElement = class extends s {
  constructor() {
    super(...arguments);
    this.minHeight = "150px";
    this.maxHeight = "100vh";
    this.ratio = "2/1";
  }
  static get styles() {
    return [aspectRatioElementStyles];
  }
  get isValidRatio() {
    return isString(this.ratio) ? /\d{1,2}\s*?(?:\/|:)\s*?\d{1,2}/.test(this.ratio) : false;
  }
  render() {
    return y`<div class="container" style="${i3({
      "--vds-aspect-ratio-percent": this._getAspectRatioPercent(),
      "--vds-aspect-ratio-min-height": this.minHeight ?? "150px",
      "--vds-aspect-ratio-max-height": this.maxHeight ?? "100vh"
    })}"><slot></slot></div>`;
  }
  _getAspectRatioPercent() {
    if (this.isValidRatio) {
      const [width, height] = this._parseAspectRatio();
      return `${height / width * 100}%`;
    }
    return "50%";
  }
  _parseAspectRatio() {
    return this.ratio.split(/\s*?(?:\/|:)\s*?/).map(Number);
  }
};
__decorateClass([
  e({ attribute: "min-height" })
], AspectRatioElement.prototype, "minHeight", 2);
__decorateClass([
  e({ attribute: "max-height" })
], AspectRatioElement.prototype, "maxHeight", 2);
__decorateClass([
  e()
], AspectRatioElement.prototype, "ratio", 2);

export {
  AspectRatioElement
};
